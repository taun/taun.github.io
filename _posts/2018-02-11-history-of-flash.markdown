---
title: "History of Flash"
excerpt: "Many of the sites hosting this history of flash are gone. I have copied it here so it will not disappear."
summary: "Many of the sites hosting this history of flash are gone. I have copied it here so it will not disappear."

gallery:
  - url: /assets/images/blog/IntelliDraw-Box-Front.jpg
    image_path: /assets/images/blog/IntelliDraw-Box-Front.jpg
    alt: "Intellidraw Box Front"
  - url: /assets/images/blog/Aldus IntelliDraw 2.0 - Splash.png
    image_path: /assets/images/blog/Aldus IntelliDraw 2.0 - Splash.png
    alt: "Intellidraw 2.0"
  - url: /assets/images/blog/Aldus IntelliDraw 1.0 - Edit.png
    image_path: /assets/images/blog/Aldus IntelliDraw 1.0 - Edit.png
    alt: "Intellidraw 2.0"
---

Now, before getting into *the history of flash*, you might be asking the question, why do I care? Why did I go through the trouble of hosting this blast from a long gone past about a software eco system killed by Steve Jobs and Apple?

Around 1990, I worked as a printing plant engineer but spent much of my time playing with the Macs in the design office. Using amazing graphics design packages like Aldus Illustrator or Freehand. They were the best of the best when it came to digital graphics design. Or so I thought. However roughly a year later I discovered Intellidraw. Which to this day, I still think was truly the most amazing digital drawing tool in the universe. It did things still no graphics design tool can. What things? 

Well, for starters, it had constraints! When constraints arrived in Xcode for Apple UI layouts, the vast majority of developers were confused. "Why do I need to do this?" "How do I do this?" and the $64,000 question, "What does over constrained mean?" For me, using constraints for a UI was the holy grail lost when Intellidraw failed and was never replaced. 

## Constraints
At the risk of stating the obvious, whenever you draw a circle in a design, there is a reason. Maybe you want it centered in a square. Or tangent to a line representing a surface. Or tucked in a corner. Whatever the reason, there was one. However, no graphics design tool ever considered that reason. You might very meticulously  put the circle in the center of the square but as soon as you resize the square, the circle is no longer centered. The tools had no way of recording the user's intent. Except Intellidraw! It had "snap to" constraints. If you put the circle in the center of the square, it would highlight the squares centerlines as a way to tell you that when you unclick the mouse, the circle will stay centered in the square. **For** **ever**. Resize the square. Move the square. Rotate the square. Resize the circle. None of that matters, the circle will stay centered. Exactly the way Xcode layouts finally works 20 years later. But Xcode isn't a graphics design tool so there's still no graphics design tool with the power of Intellidraw. 

## Object Oriented
**Everything** in Intellidraw was truly an object! To me, it behaved as you would expect the objects to behave. This has major usability implications. For example, a color was an object, with a name, a description, and various elements related to colors such as hue, saturation, brightness, patterns, and more. What made this cool is that you could decide on an accent color, create it, give it a name like "accent color" :-) then use that "accent color" for all the *accented* features. "Yeah so what" you say. "That's normal". No what's normal is those colors would be dead dumb copies and so when your client decides you need to change the accent color. You have to click on **every** element where it is used and assign a new accent color to every one of them. In Intellidraw, because that color was a single object referenced by all the features, any changes you made to that color were changed by **all** the uses of the color. Meaning, in Intellidraw, if you want to change the accent color, you literally just change the "accent color" and your whole design instantly used the new "accent color." It was like a spreadsheet for design. Quick iterative design that kept your design intents. "These elements use the accent color and that circle is centered in that rectangle."

To this day, I long for the power of Intellidraw. I toy with the idea of creating a modern Intellidraw almost monthly. It would be so easy to implement using modern Swift. Constraints are built into the OS now. You could design using the same power that Apple uses for UI layouts. [PaintCode](https://www.paintcodeapp.com) has been the closest to Intellidraw and they haven't released a new version in years. [Drama](https://www.drama.app) is a similar next gen design app by the same company which also seems to be laying fallow. There are people like myself who love the power of these tools while designing but apparently we are too few to sustain a business. ¯\_(ツ)_/¯ 

So now you know. I am interested in the history of Flash because it is the descendant of my favorite design tool of all time, Intellidraw.

{% include gallery caption="My personal copy of Intellidraw 2.0" %}

And now, onto the History of Flash (and Intellidraw)

---

Many of the sites hosting this history of flash are gone. I have copied it here so it will not disappear.

Copied from [http://warmbrain.com/archives/2002/03/the-history-of.html](http://warmbrain.com/archives/2002/03/the-history-of.html)

![lego](/assets/images/big-lego-512.png){: .align-right}

Invented by Jonathan Gay. 

A History of Flash, told by the inventor

It started with a few bits of colored plastic.

As a child, I grew up playing with Lego when there were no Lego men or whales and the pieces were all rectangles except for a few wheels and roof pieces. Lego was an early way to express my passion for building things. Lego also helped me learn the basics of engineering design. The first step was always to choose a problem. My favorite was to build big "ships" with lots of ramps and that would hold lots of cars and carry them around the house. It's easy to underestimate the difficulty of choosing a good problem. It's best to choose a problem that inspires you and challenges you but that you can achieve with your capabilities and resources. For me, Lego ships were good because I had enough bricks to build them, they captured the sense of a city that could move and they provided a place to drive little Lego cars. Lego helped me learn to allocate resources. You only had so many bricks and you needed to find an efficient way to use them. Lego was also very forgiving. If you made a mistake, you could always take part of your creation apart and make it better. This process of iterative refinement is an important part of design. It is of course good to have a vision for what you intend to create but the human mind is much too limited to be able to capture the entirety of a complex creation all at once. With Lego you can start with the vision of building a ship and work out the details of the design as you progress. Because there were lots of pieces in a Lego ship, I learned that creating interesting things takes time and that if you are patient and keep at it, you will finish it.

Design Process Choose a problem - Build a Lego ship.

1. Develop a vision - What sort of ship will it be? How big will it be? What will it carry?
2. Build - Build the framework of the ship.
3. Fill in the details - Design and build the details of the ship, ramps, doors, etc.
4. Test - Drive the cars around the ship and sail the ship while exploring the house.
5. Refine - Take parts of the ship apart and make them better.
6. Learn - Take what you learned from building this ship and use it to build a better one next time.

As I looked for challenges beyond Lego ships, I dreamed of architecture. What greater achievement for man is there than creating great buildings? I had a little drafting table and drew plans for houses. As much as I enjoyed designing houses, I quickly realized that as a young teenager, there is just not a lot of opportunity to actually build the houses I designed. Although, I did actually get to design and build a shed and garage at my family's cabin in the mountains. About that time, I got an Apple II computer for helping to paint the house one summer. As I began to program, I quickly discovered that with computer software, you can design something, build it and then see it work and respond to you. Although bits of Apple II Basic were not as impressive as building houses, I could take a project to completion and see if it worked. The first game I wrote was a Space Invaders clone on the Apple II in Basic. As I graduated from Basic to writing in Pascal, I wrote my first graphics editor. If you ever think Flash is difficult to use, you should try drawing with a joystick on an Apple II before the concept of undo was invented. That will test your patience.

I got my big break in professional programming when I was in high school. I had entered my graphics editor in the school science fair and done well with it. Also around this time, the Macintosh came out and I had just gotten one. My father took me to an early Macintosh Users Group meeting and he bragged to the organizer of the group about my science fair project. It turns out that the organizer was Charlie Jackson and he was looking to start a Macintosh software company, Silicon Beach Software, but did not have much money to spend. He realized that as a high school student, I did not need to earn any money so I could build a program and he could pay me after he started selling it. This was a good deal for me because the only way that I could write software for the Mac was to get access to a $10,000 Lisa computer and Charlie had bought a Lisa. I still think he was a little bit crazy to believe that a high school student could write Macintosh software but I did manage to write Airborne!. It was the first Macintosh game that used digitized sound and had animation that did not flicker. For the time, it was a big seller. For my second game, we hired a professional artist and created Dark Castle. Dark Castle was a big hit and paid my way through college. After Dark Castle, there was Beyond Dark Castle. Writing games was an important part of my computer education because I learned about animation, about digitized sound and how to synchronize sound with animation. Most importantly, I learned that fast and responsive software is fun to use. After Beyond Dark Castle, I worked on adding PostScript style drawing support to SuperPaint II.

After SuperPaint and graduating from college, I went to work for Silicon Beach Software full time and began to develop technology for creating a new generation of graphics software. It would be written in C++, would use an object-oriented framework to make development easy and to enable it to run on the Macintosh and Windows. This technology became a drawing program called [Intellidraw](https://tidbits.com/1992/12/07/intellidraw-review/) that would enable Silicon Beach to compete with Adobe Illustrator and Aldus Freehand in the Postscript drawing market. The unique aspect of Intellidraw was that not only did it draw pictures, it allowed you to add behavior to your drawings so you could create lines that stayed connected to objects and you could draw a bar chart that would change as the user entered numbers into a text object. It turns out that the first computer drawing product, called SketchPad, had this ability but people had forgotten about it. A company call Visio was able to take this idea and create a very successful product but Intellidraw never found a significant market. When I realized that Intellidraw was destined to be a modest success, I decided it was time for me to find a new challenge. I had made as much money working part time as I had working full time on Intellidraw so I decided I should try and place myself in a position where I could create a successful product and benefit from It's success so I started my own company. 

The hot new concept in the personal computing world was pen computing. A company called Go was building an operating system for a new generation of portable computers that would have a screen you could write on with an electronic pen instead of a keyboard. The computers could be smaller and you could use them standing up just like you use a note pad. It was a very appealing idea and with Silicon Beach Software, we had seen how a new operating system created the opportunity to build new software companies. In January of 1993, I convinced Charlie Jackson to invest some money and we started FutureWave Software to dominate the market for graphics software on pen computers. An important lesson that I had learned from Intellidraw is that it was hard for users to learn complex features in a program and that the real challenge in writing good software is creating sophisticated software that is easy to use. I also knew that drawing on a computer was in many ways much slower and more awkward than drawing with a pencil on paper. The mouse had been an improvement over a joystick but I imagined that drawing with a pen directly on a computer screen would be even easier. So Robert Tatsumi and I set out to build software that would make drawing on the computer easier than drawing on paper. Go turned out to be better at spending money than writing great operating systems so they were purchased by AT&T who was going to build computers that would enable people to send faxes from the beach. AT&T soon discovered that people were not compelled to spend $4,000 to send faxes from the beach so in January of 1994, just as we were about to ship our first product, AT&T pulled the plug on Go and left us without a market. We did actually make a few sales of SmartSketch. The most noteworthy sale was to an architect working on Bill Gate1s house.

The failure of Go and pen computing was a big setback considering we were a company with no income that had just spent a year developing a product we could not sell. The only opportunity we saw was to take our software and make it run on Windows and the Macintosh. We sold SmartSketch as a better way to draw on the computer and had some success. However, it was difficult for a small company to compete in an established market and even harder to convince Illustrator and Freehand users that they needed a better way to draw. We persisted at working to sell SmartSketch but it was an uphill struggle and we were looking for a new strategy. In the summer of 1995, we were sharing a booth at Siggraph, a computer trade show for high end graphics users, and got lots of feedback from people that we should turn SmartSketch into an animation product. I wanted to build an animation product but since the only way at the time to distribute animation was either on video tape, or on a CD ROM, the market for animation tools was very small. However, also about this time, we were starting to hear about the Internet and the Web. It seemed possible that the Internet would become popular enough that people would want to send graphics and animation over the Internet. That might create enough of a market for 2-D computer animation to enable us to create a profitable product. We began to add animation to SmartSketch. At the time, the only way to extend a web browser was through Java so we wrote a simple animation player that used Java and was horribly slow. We stubbornly kept at it and in the fall, Netscape came out with their plug-in API and we had a way to extend the web browser with decent performance. We started to talk about shipping SmartSketch Animator. We then realized that we did not really have much brand recognition in the name SmartSketch and should focus less on drawing and more on animation so we started talking about CelAnimator. Before we shipped, we realized that we did not want to get pigeon holed as a cartoon creation product so the product name was changed to FutureSplash Animator. As we were working on FutureSplash Animator, we realized that we were tired of running a company that did not have much money to spend.

In the October of 1995 we tried to sell our technology to John Warnock at Adobe. He was a bit intrigued by the SmartSketch drawing software but the horribly slow demo of our animation in Java was not impressive so Adobe passed. In December of 1995, we almost sold the company to Fractal Design but they were mostly interested in the SmartSketch drawing software and did not place much value on our new web animation technology so we did not close a deal with them.

In the summer of 1996, we shipped FutureSplash Animator and began to get some interest. Our big success was in August of 1996, Microsoft was working on their web version of MSN and they wanted to create the most television like experience they could get on the Internet with a modem and computer and they because fans of FutureSplash. I1m still surprised that they made their launch of MSN dependent on a new animation technology from a six-person company but it was a great way for us to get exposure and an early lead as a technology for web animation. Our other high profile client besides Microsoft was Disney Online. Disney was using FutureSplash to build animation and user interface for their subscription based online service Disney Daily Blast. In November of 1996, Macromedia was getting tired of hearing about our product when they worked with Disney to use Macromedia1s Shockwave product. So Macromedia approached us about working together. We had been running FutureWave for 4 years with a total investment of $500,000 and the idea of having access to the resources of a larger company to help us get FutureSplash established in a market that was full of competitors and growing slowly seemed like a good one. So in December of 1996, we sold FutureWave Software to Macromedia and FutureSplash Animator became Macromedia Flash 1.0. 

In the middle of 2000, now Flash has been through 4 versions at Macromedia. It still has the much of code that was written for pen computers. It has evolved from a simple web drawing and animation package to a complete multimedia development environment with 500,000 developers and 250 million users of the player. Flash has become synonymous with animation on the Internet. It's possible that Flash is the most widely distributed piece of software on the Internet ahead of Internet Explorer, Netscape Navigator, and Real Player and it all started with the lessons learned by a boy from a few bits of plastic. If you surf the web, you may not have known it but you probably have used Flash. 

Flash is even used on the Lego web site to help sell more bits of colored plastic.